import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from utils import findProductPosition


logging.basicConfig(level=logging.INFO)
load_dotenv()

API_TOKEN = os.environ.get('API_TOKEN')

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class WaitingForSearchState(StatesGroup):
    waiting_for_query = State()
    waiting_for_id = State()


@dp.message_handler(commands='start')
async def send_welcome(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        'üßëüèª‚Äçüíª –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n–Ø —è–≤–ª—è—é—Å—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Ç–µ—Å—Ç–æ–≤—ã–º –∑–∞–¥–∞–Ω–∏–µ–º\n'
        '–¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ Python Developer üêç –≤ –ò–ü –ï–ª—å–º–µ–µ–≤ –î–∞–Ω–∏–ª –ì–µ–æ—Ä–≥–∏–µ–≤–∏—á\n'
        '\n<b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å üî°</b>\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä, –ü–ª–∞—Ç—å–µ</i>',
        parse_mode='HTML'
    )
    await WaitingForSearchState.waiting_for_query.set()


@dp.message_handler(state=WaitingForSearchState.waiting_for_query)
async def process_query(message: types.Message, state: FSMContext):
    await state.update_data(query=message.text)
    await bot.send_message(
        message.from_user.id,
        '–û—Ç–ª–∏—á–Ω–æ ‚úÖ\n'
        '<b>–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ üî¢</b>\n'
        '<i>–ù–∞–ø—Ä–∏–º–µ—Ä, 87989388</i>',
        parse_mode='HTML'
    )
    await WaitingForSearchState.waiting_for_id.set()


@dp.message_handler(state=WaitingForSearchState.waiting_for_id)
async def process_id(message: types.Message, state: FSMContext):
    await state.update_data(id=message.text)
    get_state = await state.get_data()
    id = get_state.get('id')
    query = get_state.get('query')

    await bot.send_message(
        message.from_user.id,
        '–ü—Ä–æ–∏–∑–≤–æ–∂—É –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ üîÉ\n–û–∂–∏–¥–∞–π—Ç–µ üö∑',
        parse_mode='HTML'
    )

    results = await findProductPosition(id, query)

    if results['found'] == True:
        data = results['data']
        await bot.send_message(
            message.from_user.id,
            f'üü¢ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω\n<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞: {data["page"]}\n–ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {data["position"]}</b>',
            parse_mode='HTML'
        )
    else:
        await bot.send_message(
            message.from_user.id,
            'üî¥ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–¥–∞—á–µ –∑–∞–ø—Ä–æ—Å–æ–≤\n'
            '–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ª–∏–±–æ –≤–∞—à —Ç–æ–≤–∞—Ä –Ω–µ –ø–æ–ø–∞–ª –≤ –ø–æ–∏—Å–∫–æ–≤—É—é –≤—ã–¥–∞—á—É üò¢',
            parse_mode='HTML'
        )

    await state.finish()


if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logging.exception("Error in the bot")
